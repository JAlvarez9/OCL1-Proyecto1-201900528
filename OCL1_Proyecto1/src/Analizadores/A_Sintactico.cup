
/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes
package Analizadores;
import Objetos.NodeArbol;
import Objetos.Expresiones;
import Objetos.Conjuntos;
import Objetos.Encabezado;
import Objetos.Arbol;
import Errores.ErroresS;
import Objetos.Validaciones;
import ocl1_proyecto1.Interface;
import java_cup.runtime.Symbol;

import javax.swing.JOptionPane;
import java.util.LinkedList;


//------> Codigo para el parser,variables, metodos
parser code{:
        
        public static NodeArbol raiz;
        public static LinkedList<Object> enca;
        
        
        public int contHojas = 1;
        public int contExpre = 0;
        public static LinkedList<Validaciones> lista_valida;

        public NodeArbol getRaiz(){
            return raiz;
        }
        public void syntax_error(Symbol s)
        {
            System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
            ErroresS nuevo = new ErroresS("Error Sintactico (Recuperado)", s.value.toString(), s.right+1, s.left+1);
            Interface.listErrors.add(nuevo);
        }
        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
            System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
            ErroresS nuevo = new ErroresS("Error Sintactico", s.value.toString(), s.right+1, s.left+1);
            Interface.listErrors.add(nuevo);
        }

:}

//------> Codigo para las acciones gramaticales
action code
{:  :}

/*--------------- 2da Area: Declaraciones -----------------------*/

//------> declaracion de terminales 

terminal digito, 
         letra,
         esp, conca, or, cierre, mas, corchea, corchec, guion, mayork, menork, prct, dspts, ptcoma,
        curv, inte, conj, cadena, sltln,cmllsmpl,cmlldbl, id,coma;

//------> declaracion de no terminales
non terminal LinkedList<Object> INICIO,
                                 ENCABEZADO
                                 ;
non terminal Conjuntos CONJUNTOS
                    ; 

non terminal NodeArbol E
                    ;
non terminal Expresiones EXPRESION
                    ;
non terminal String VALORES,
                    VAL,
                    LIST_VAL    
                    ;
non terminal LinkedList<Validaciones> VALIDACIONES
                    ;
non terminal Validaciones VALIDA
                    ;

//------> precedencia de mayor a menor
precedence right conca;
precedence right or;
precedence right cierre, mas, inte;



start with INICIO; 

/*--------------- 3ra Area: Reglas Semanticas -----------------------*/


INICIO::= corchea ENCABEZADO:a prct prct 
            prct prct VALIDACIONES:b corchec        {:parser.enca = a; parser.lista_valida = b;:}
            | error
       ;
ENCABEZADO ::= ENCABEZADO:a EXPRESION:b         {: RESULT = a; RESULT.add(b); :}
            | ENCABEZADO:a CONJUNTOS:b          {: RESULT = a; RESULT.add(b);:}
            | EXPRESION:a                     {: RESULT = new LinkedList<>(); RESULT.add(a);:}
            | CONJUNTOS:a                    {: RESULT = new LinkedList<>(); RESULT.add(a);:}
        ;
CONJUNTOS ::= conj dspts id:a guion mayork VALORES:b ptcoma    {: RESULT = new Conjuntos(a.toString(), b,"Conjunto"); :}
        | error
         ;
VALORES ::= VAL:a curv:b VAL:c        {:RESULT = a.toString()+b+c.toString();:}
        | LIST_VAL:a                  {:RESULT = a.toString();:}
        ;
VAL ::= letra:a                   {: RESULT = a.toString();:}
        | digito:a                {: RESULT = a.toString();:}
        | sltln:a                 {: RESULT = a.toString();:}
        | cmllsmpl:a              {: RESULT = a.toString();:}
        | cmlldbl:a               {: RESULT = a.toString();:}
        | esp:a                   {: RESULT = a.toString();:}
        | id:a                    {: RESULT = a.toString();:}
        | cadena:a                {: RESULT = a.toString();:}
    ;
LIST_VAL ::= LIST_VAL:a coma:b VAL:c        {:RESULT = a.toString()+b+c.toString();:}
            | VAL:a                         {: RESULT = a.toString();:}
        ;   
EXPRESION ::= id:a guion mayork E:b ptcoma     {:RESULT = new Expresiones(a.toString(), new Arbol(b, a.toString(), parser.contHojas),"Expresion"); parser.contHojas = 1; :}
        ;

E ::= conca E:a E:b             {: RESULT = new NodeArbol(".","", -1,a,b,true,null,null);   :}
    | or E:a E:b                {: RESULT = new NodeArbol("|","", -1,a,b,true,null,null); :}
    | cierre E:a                {: RESULT = new NodeArbol("*","", -1,a,null,true,null,null); :}
    | mas E:a                   {: RESULT = new NodeArbol("+","", -1,a,null,false,null,null); :}
    | inte E:a                  {: RESULT = new NodeArbol("?","", -1,a,null,true,null,null); :}
    | digito:a                  {: RESULT = new NodeArbol(a.toString(), "", parser.contHojas,null,null,false,String.valueOf(parser.contHojas),String.valueOf(parser.contHojas)); parser.contHojas++; :}
    | corchea id:a corchec      {: RESULT = new NodeArbol(a.toString(), "", parser.contHojas,null,null,false,String.valueOf(parser.contHojas),String.valueOf(parser.contHojas)); parser.contHojas++;  :}
    | sltln:a                   {: RESULT = new NodeArbol(a.toString(), "", parser.contHojas,null,null,false,String.valueOf(parser.contHojas),String.valueOf(parser.contHojas)); parser.contHojas++;  :}
    | cmllsmpl:a                {: RESULT = new NodeArbol(a.toString(), "", parser.contHojas,null,null,false,String.valueOf(parser.contHojas),String.valueOf(parser.contHojas)); parser.contHojas++;  :}
    | cmlldbl:a                 {: RESULT = new NodeArbol(a.toString(), "", parser.contHojas,null,null,false,String.valueOf(parser.contHojas),String.valueOf(parser.contHojas)); parser.contHojas++;  :}
    | cadena:a                  {: RESULT = new NodeArbol(a.toString(), "", parser.contHojas,null,null,false,String.valueOf(parser.contHojas),String.valueOf(parser.contHojas)); parser.contHojas++;  :}
    ; 

VALIDACIONES ::= VALIDACIONES:a VALIDA:b        {: RESULT = a; RESULT.add(b); :}
            | VALIDA:a                          {: RESULT = new LinkedList<>(); RESULT.add(a);:}
            ;
VALIDA::= id:a dspts cadena:b ptcoma            {:RESULT = new Validaciones(a.toString(),b.toString());:}
            ; 
